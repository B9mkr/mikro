
pm.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000098  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  000000ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000001b  00000000  00000000  0000010c  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000091  00000000  00000000  00000127  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 0000005d  00000000  00000000  000001b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000000da  00000000  00000000  00000215  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000020  00000000  00000000  000002f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    0000007e  00000000  00000000  00000310  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000001e  00000000  00000000  0000038e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 4a 00 	jmp	0x94	; 0x94 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
//a) w trybie NORMAL (odczyt flagi TOV0)
//b) w trybie CTC (odczyt flagi OCF0)

int main(void) 
{
    DDRA  |= LED0;
  6c:	d7 9a       	sbi	0x1a, 7	; 26
	TCNT0 = 0x00;
  6e:	12 be       	out	0x32, r1	; 50
    TCCR0=(1<<CS00) | (1<<CS02);
  70:	85 e0       	ldi	r24, 0x05	; 5
  72:	83 bf       	out	0x33, r24	; 51
  74:	80 e0       	ldi	r24, 0x00	; 0
    while(1)
    {
        while((TIFR & 0x01) != 0);

		TCNT0 = 0x00;
		TIFR=0x01;
  76:	91 e0       	ldi	r25, 0x01	; 1
  78:	01 c0       	rjmp	.+2      	; 0x7c <main+0x10>

int main(void) 
{
    DDRA  |= LED0;
	TCNT0 = 0x00;
    TCCR0=(1<<CS00) | (1<<CS02);
  7a:	81 e0       	ldi	r24, 0x01	; 1
	
	uint8_t TOC=0;// tIMERoVERFLOWcOUNT

    while(1)
    {
        while((TIFR & 0x01) != 0);
  7c:	08 b6       	in	r0, 0x38	; 56
  7e:	00 fc       	sbrc	r0, 0
  80:	fd cf       	rjmp	.-6      	; 0x7c <main+0x10>

		TCNT0 = 0x00;
  82:	12 be       	out	0x32, r1	; 50
		TIFR=0x01;
  84:	98 bf       	out	0x38, r25	; 56
		TOC++;
		if(TOC >= 2)
  86:	81 30       	cpi	r24, 0x01	; 1
  88:	c1 f7       	brne	.-16     	; 0x7a <main+0xe>
		{
			PORTA ^= LED0;
  8a:	8b b3       	in	r24, 0x1b	; 27
  8c:	80 58       	subi	r24, 0x80	; 128
  8e:	8b bb       	out	0x1b, r24	; 27
  90:	80 e0       	ldi	r24, 0x00	; 0
  92:	f4 cf       	rjmp	.-24     	; 0x7c <main+0x10>

00000094 <_exit>:
  94:	f8 94       	cli

00000096 <__stop_program>:
  96:	ff cf       	rjmp	.-2      	; 0x96 <__stop_program>
